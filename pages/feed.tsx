import { useAppDispatch } from "@/hooks"
import CreatePostCard from "@/components/CreatePostCard"
import PostCard from "@/components/PostCard"
import ProfileCard from "@/components/ProfileCard"
import { usersActions } from "@/slices/usersSlice"
import { Post } from "@/types/postType"
import { CircularProgress, Container, Divider, Grid, Stack } from "@mui/material"
import Head from "next/head"
import * as React from "react"
import RecommendedUsersCard from "@/components/RecommendedUsersCard"
import { User } from "@/types/userType"
import axios from "axios"
import { withIronSessionSsr } from "iron-session/next"
import { sessionOptions } from "../lib/session"
import { getNumFollowers } from "./api/followers/[userId]"
import { getNumPosts } from "./api/posts/user/[userId]"

interface FeedPageProps {
	user: User
	numFollowers: number
	numPosts: number
}

export const getServerSideProps = withIronSessionSsr( async function( {
	req,
} ) {
	const user = req.session.user

	const numFollowers = await getNumFollowers( user?.userId.toString() || "0" )
	const numPosts = await getNumPosts( user?.userId.toString() || "0" )

	if( !user ) {
		return {
			redirect: {
				destination: "/",
				permanent: false
			}
		}
	}

	return {
		props: {
			user,
			numFollowers,
			numPosts
		}
	}
}, sessionOptions )

export default function FeedPage( props: FeedPageProps ) {
	/**
	 * Hooks
	 */
	const dispatch = useAppDispatch()

	/**
	 * State
	 */
	// State to hold a list of posts for the user's feed
	const [posts, setPosts] = React.useState( [] as Post[] )
	// State to hold if the feed is loading
	const [ loading, setLoading] = React.useState( true )
	// State to hold how posts the user has created
	const [ numPosts, setNumPosts ] = React.useState( props.numPosts )

	/**
	 * Callbacks
	 */
	const handleCreatePost = React.useCallback( async ( content: string, categories: string[] ) => {
		const response = await axios.post( "/api/posts", {
			content,
			categories
		} )
		const post = response.data.post

		const newPost: Post = {
			...post,
			createdOn: new Date( post.createdOn ),
			updatedOn: new Date( post.updatedOn )
		}
		if( newPost ) {
			setPosts( prevState => [newPost, ...prevState] )
			setNumPosts( prevState => prevState + 1 )
		}
	}, [] )

	const handleDeletePost = React.useCallback( async ( postId: number ) => {
		await axios.delete( `/api/posts/${postId}` )

		setPosts( prevState => prevState.filter( post => post.postId !== postId ) )
	}, [] )

	/**
	 * Effects
	 */
	// Initial render - initializes the users in the Redux store and fetches the user's feed from the API
	React.useEffect( () => {
		const fetchFeed = async () => {
			const response = await axios( "/api/posts/feed" )

			const newPosts: Post[] = response.data.posts.map( ( post: Post ) => ( {
				...post,
				createdOn: new Date( post.createdOn ),
				updatedOn: new Date( post.updatedOn )
			} ) )
			const newUsers: User[] = response.data.users

			dispatch( usersActions.updateUsers( newUsers ) )
			setPosts( newPosts )
		}

		fetchFeed().then( () => {
			setLoading( false )
		} )
	}, [ dispatch ] )

	return (
		<Container
			sx={{
				pt: 3
			}}
		>
			<Head>
				<title>KSUConnect | Feed</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main>
				<Grid container columnSpacing={2}>
					<Grid item xs={3}>
						<ProfileCard 
							user={props.user} 
							numFollowers={props.numFollowers}
							numPosts={numPosts}
						/>
					</Grid>
					<Grid item xs={6}>
						<CreatePostCard 
							user={props.user}
							onCreatePost={handleCreatePost}
						/>
						<Divider 
							sx={{
								mb: 2
							}}
						/>
						<Stack spacing={1} alignItems="center">
							{loading && (
								<CircularProgress />
							)}
							{!loading && posts.map( ( post, index ) => (
								<PostCard 
									post={post} 
									key={index} 
									editable={props.user.userId === post.userId}
									handleDeleteClicked={() => handleDeletePost( post.postId )}
								/>
							) )}
						</Stack>
					</Grid>
					<Grid item xs={3} >
						<RecommendedUsersCard 
							userId={props.user.userId}
						/>
					</Grid>
				</Grid>
			</main>
		</Container>
	)
}
