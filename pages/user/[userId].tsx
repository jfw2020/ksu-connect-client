import { Avatar, Box, Button, CircularProgress, Container, Divider, Grid, Stack, Typography } from "@mui/material"
import { GetServerSideProps } from "next"
import Head from "next/head"
import * as React from "react"
import { getUser } from "../api/users/[userId]"
import { User } from "@/types/userType"
import { getNumFollowers } from "../api/followers/[userId]"
import { getMajorsText } from "@/lib/helpers"
import RecommendedUsersCard from "@/components/RecommendedUsersCard"
import useUser from "@/lib/useUser"
import { Post } from "@/types/postType"
import { usersActions } from "@/slices/usersSlice"
import axios from "axios"
import { useAppDispatch } from "@/hooks"
import PostCard from "@/components/PostCard"

interface UserPageProps {
	user: User
	posts: Post[]
	numFollowers: number
}

export const getServerSideProps: GetServerSideProps = async ( context ) => {
	const userId = context.query.userId

	const user = await getUser( userId as string )
	const numFollowers = await getNumFollowers( userId as string )

	if( !user ) {
		return {
			props: {}
		}
	}

	return { 
		props: {
			user,
			numFollowers
		}
	}
}

export default function UserPage( props: UserPageProps ) {
	/**
	 * Hooks
	 */
	const dispatch = useAppDispatch()
	const { user } = useUser()

	/**
	 * State
	 */
	// State to hold a list of posts for the user's feed
	const [posts, setPosts] = React.useState( [] as Post[] )
	// State to hold if the feed is loading
	const [ loading, setLoading] = React.useState( true )

	/**
	 * Effects
	 */
	// Initial render - initializes the users in the Redux store and fetches the user's feed from the API
	React.useEffect( () => {
		const fetchPosts = async () => {
			const response = await axios( `/api/posts/user/${props.user.userId}` )

			const newPosts: Post[] = response.data.posts.map( ( post: Post ) => ( {
				...post,
				createdOn: new Date( post.createdOn ),
				updatedOn: new Date( post.updatedOn )
			} ) )
			const newUsers: User[] = response.data.users

			dispatch( usersActions.updateUsers( newUsers ) )
			setPosts( newPosts )
		}

		fetchPosts().then( () => {
			setLoading( false )
		} )
	}, [dispatch, props.user.userId] )

	return (
		<Container
			sx={{
				pt: 3
			}}
		>
			<Head>
				<title>KSUConnect | {props.user.firstName} {props.user.lastName}</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main>
				<Grid container columnSpacing={2}>
					<Grid item xs={8}>
						<Stack gap={2}>
							<Box
								border="1px solid"
								borderColor="divider"
								borderRadius={3}
								bgcolor="white"
								p={2}
							>
								<Stack gap={1}>
									<Box 
										sx={{
											display: "flex",
											justifyContent: "space-between",
											alignItems: "flex-start"
										}}
									>
										<Avatar 
											alt={`${props.user.firstName} ${props.user.lastName}`}
											src={props.user.imageUrl}
											sx={{
												height: 128,
												width: 128
											}}
										/>
										{user?.userId !== props.user.userId && (
											<Button variant="contained">Follow</Button>
										)}
									</Box>
									<Typography variant="h4">{props.user.firstName} {props.user.lastName}</Typography>
									<Typography variant="subtitle1">{getMajorsText( props.user.majors )}</Typography>
									<Typography variant="caption">{props.numFollowers} followers</Typography>
								</Stack>
							</Box>
							<Divider />
							<Stack spacing={1} alignItems="center">
								{loading && (
									<CircularProgress />
								)}
								{!loading && posts.map( ( post, index ) => (
									<PostCard post={post} key={index} />
								) )}
							</Stack>
						</Stack>
					</Grid>
					<Grid item xs={4} >
						<RecommendedUsersCard />
					</Grid>
				</Grid>
			</main>
		</Container>
	)
}
