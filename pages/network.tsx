import UserRow from "@/components/UserRow"
import useUser from "@/lib/useUser"
import { User } from "@/types/userType"
import { Box, CircularProgress, Container, Stack, Tab, Tabs, Typography } from "@mui/material"
import axios from "axios"
import Head from "next/head"
import * as React from "react"

export default function Network() {
	const [ tabIndex, setTabIndex ] = React.useState( 0 )

	return (
		<Container
			sx={{
				pt: 3
			}}
		>
			<Head>
				<title>KSUConnect | Network</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main>
				<Box
					sx={{
						backgroundColor: "white",
						borderRadius: 3,
						padding: 2,
					}}
					border="1px solid"
					borderColor="divider"
				>
					<Typography variant="h6">My Network</Typography>
					<Box borderBottom={1} borderColor="divider">
						<Tabs value={tabIndex} onChange={( _, val ) => setTabIndex( val )}>
							<Tab label="Following" />
							<Tab label="Followers" />
						</Tabs>
					</Box>
					<TabPanel value={tabIndex} index={0}>
						<UsersPanel following />
					</TabPanel>
					<TabPanel value={tabIndex} index={1}>
						<UsersPanel />
					</TabPanel>
				</Box>
			</main>
		</Container>
	)
}

interface TabPanelProps {
	children?: React.ReactNode
	index: number
	value: number
}

function TabPanel( props: TabPanelProps ) {
	return (
		<div
			role="tabpanel"
			hidden={props.value !== props.index}
		>
			{props.value === props.index && (
				<Box p={1} pb={0}>
					{props.children}
				</Box>
			)}
		</div>
	)
}

interface UsersPanelProps {
	following?: boolean
}

function UsersPanel( props: UsersPanelProps ) {
	const { user } = useUser()

	const [ users, setUsers ] = React.useState<User[]>( [] )
	const [ loading, setLoading ] = React.useState( true )

	React.useEffect( () => {
		const fetchUsers = async () => {
			const response = await axios( `/api/${props.following ? "following" : "followers"}/${user?.userId || 0}` )

			const newUsers: User[] = response.data.users

			setUsers( newUsers )
		}

		fetchUsers().then( () => {
			setLoading( false )
		} )
	}, [user?.userId, props.following] )

	return (
		<Stack gap={1}>
			{loading && (
				<CircularProgress 
					sx={{
						alignSelf: "center",
					}}
				/>
			)}
			{!loading && users.map( user => (
				<UserRow 
					user={user}
					key={user.userId}
				/>
			) )}
		</Stack>
	)
}
