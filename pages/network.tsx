import UserRow from "@/components/UserRow"
import useUser from "@/lib/useUser"
import { User } from "@/types/userType"
import { Box, Button, CircularProgress, Container, Divider, FormControl, InputLabel, MenuItem, Pagination, Select, Stack, Tab, Tabs, Typography } from "@mui/material"
import axios from "axios"
import Head from "next/head"
import * as React from "react"

/**
 * NetworkPage Component
 * 
 * This component is the page that shows the user all of their connections.
 * They can see who they are following, who follows them, and users that 
 * they can discover.
 */
export default function NetworkPage() {
	/**
	 * State
	 */
	// State to holder which tab should be displayed
	const [ tabIndex, setTabIndex ] = React.useState( 0 )

	/**
	 * Render
	 */
	return (
		<Container
			sx={{
				pt: 3
			}}
		>
			<Head>
				<title>KSUConnect | Network</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main>
				<Box
					sx={{
						backgroundColor: "white",
						borderRadius: 3,
						padding: 2,
					}}
					border="1px solid"
					borderColor="divider"
				>
					<Typography variant="h6">My Network</Typography>
					<Box borderBottom={1} borderColor="divider">
						<Tabs value={tabIndex} onChange={( _, val ) => setTabIndex( val )}>
							<Tab label="Following" />
							<Tab label="Followers" />
							<Tab label="Discover" />
						</Tabs>
					</Box>
					<TabPanel value={tabIndex} index={0}>
						<UsersPanel following />
					</TabPanel>
					<TabPanel value={tabIndex} index={1}>
						<UsersPanel />
					</TabPanel>
					<TabPanel value={tabIndex} index={2}>
						<DiscoverPanel />
					</TabPanel>
				</Box>
			</main>
		</Container>
	)
}

/**
 * Props for the TabPanel component
 */
interface TabPanelProps {
	children?: React.ReactNode
	index: number
	value: number
}

/**
 * TabPanel Component
 * 
 * This component renders children that should be shown
 * in the currently select tab.
 */
function TabPanel( props: TabPanelProps ) {
	return (
		<div
			role="tabpanel"
			hidden={props.value !== props.index}
		>
			{props.value === props.index && (
				<Box p={1} pb={0}>
					{props.children}
				</Box>
			)}
		</div>
	)
}

/**
 * Props for the UsersPanel component
 */
interface UsersPanelProps {
	following?: boolean
}

/**
 * UsersPanel Component
 * 
 * This component either shows all the users that the currently logged in user
 * is followed by or is following based on the following? prop.
 */
function UsersPanel( props: UsersPanelProps ) {
	/**
	 * Hooks
	 */
	// Uses the currently logged in user
	const { user } = useUser()

	/**
	 * State
	 */
	// State to hold all the following/follower users
	const [ users, setUsers ] = React.useState<User[]>( [] )
	// State to hold whether the query is still loading
	const [ loading, setLoading ] = React.useState( true )

	/**
	 * Effects
	 */
	// Loads all the following/follower users from the DB and populates the state
	React.useEffect( () => {
		const fetchUsers = async () => {
			const response = await axios( `/api/${props.following ? "following" : "followers"}/${user?.userId || 0}` )

			const newUsers: User[] = response.data.users

			setUsers( newUsers )
		}

		fetchUsers().then( () => {
			setLoading( false )
		} )
	}, [user?.userId, props.following] )

	/**
	 * Render
	 */
	return (
		<Stack gap={1}>
			{loading && (
				<CircularProgress 
					sx={{
						alignSelf: "center",
					}}
				/>
			)}
			{!loading && users.length === 0 && (
				<Typography>No users</Typography>
			)}
			{!loading && users.map( user => (
				<UserRow 
					user={user}
					key={user.userId}
				/>
			) )}
		</Stack>
	)
}

/**
 * DiscoverPanel Component
 * 
 * This component allows the user to discover other users. They
 * can filter by SchoolStatus, Major, and Categories that other
 * users are interested it.
 */
function DiscoverPanel() {
	/**
	 * State
	 */
	// State that holds the currently select status
	const [status, setStatus] = React.useState( "" )
	// State that holds the currently select major
	const [major, setMajor] = React.useState( "" )
	// State that holds the currently select category
	const [category, setCategory] = React.useState( "" )
	// State that holds the list of all statuses available from the DB
	const [statuses, setStatuses] = React.useState<string[]>( [] )
	// State that holds the list of all majors available from the DB
	const [majors, setMajors] = React.useState<string[]>( [] )
	// State that holds the list of all categories available from the DB
	const [categories, setCategories] = React.useState<string[]>( [] )
	// State that holds the list of Users that match the query
	const [users, setUsers] = React.useState<User[]>( [] )
	// State that holds the query is loading or not
	const [loading, setLoading] = React.useState( true )
	// State that holds the pagination page the user has selected
	const [page, setPage] = React.useState( 1 )
	// State that holds the number of pages in the search query
	const [pageCount, setPageCount] = React.useState( 0 )

	/**
	 * Callbacks
	 */
	// Clears all the filters
	const handleClearFilters = React.useCallback( () => {
		setStatus( "" )
		setMajor( "" )
		setCategory( "" )
	}, [] )

	// Initial render - fetches all the filters from the DB
	React.useEffect( () => {
		const fetchFilters = async () => {
			const response = await axios( "/api/filters" )

			setStatuses( response.data.statuses )
			setMajors( response.data.majors )
			setCategories( response.data.categories )
		}

		fetchFilters()
	}, [] )

	// Whenever one of the filters changes, queries the DB for users that match
	React.useEffect( () => {
		const fetchUsers = async () => {
			const response = await axios.post( "/api/filters/users", {
				status,
				major,
				category,
				page
			} )

			setUsers( response.data.users )
			setPageCount( response.data.pageCount )
		}

		setLoading( true )
		setTimeout( () => {
			fetchUsers().then( () => setLoading( false ) )
		}, 1000 )
	}, [status, major, category, page] )

	// When the filters changes, show the first page of results
	React.useEffect( () => {
		setPage( 1 )
	}, [status, major, category] )

	/**
	 * Render
	 */
	return (
		<Stack gap={1}>
			<Stack
				sx={{
					flexDirection: "row",
					alignItems: "center"
				}}
				gap={1}
			>
				<FormControl sx={{ minWidth: 200 }}>
					<InputLabel id="school-status-select">School Status</InputLabel>
					<Select 
						labelId="school-status-select"
						label="School Status"
						value={status}
						onChange={e => setStatus( e.target.value )}
					>
						{statuses.map( item => (
							<MenuItem value={item} key={item}>{item}</MenuItem>
						) )}
					</Select>
				</FormControl>
				<FormControl sx={{ minWidth: 200 }}>
					<InputLabel id="major-select">Major</InputLabel>
					<Select 
						labelId="major-select"
						label="Major"
						value={major}
						onChange={e => setMajor( e.target.value )}
					>
						{majors.map( item => (
							<MenuItem value={item} key={item}>{item}</MenuItem>
						) )}
					</Select>
				</FormControl>
				<FormControl sx={{ minWidth: 200 }}>
					<InputLabel id="category-select">Category</InputLabel>
					<Select 
						labelId="category-select"
						label="Category"
						value={category}
						onChange={e => setCategory( e.target.value )}
					>
						{categories.map( item => (
							<MenuItem value={item} key={item}>{item}</MenuItem>
						) )}
					</Select>
				</FormControl>
				<Button variant="contained" onClick={handleClearFilters}>Clear Filters</Button>
			</Stack>
			<Divider />
			<Pagination sx={{ alignSelf: "center" }} count={pageCount} page={page} onChange={( e, value ) => setPage( value )} />
			<Stack gap={1}>
				{loading && (
					<CircularProgress 
						sx={{
							alignSelf: "center",
						}}
					/>
				)}
				{!loading && users.length === 0 && (
					<Typography>No users</Typography>
				)}
				{!loading && users.map( user => (
					<UserRow 
						user={user}
						key={user.userId}
					/>
				) )}
			</Stack>
		</Stack>
	)
}
