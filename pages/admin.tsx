import PostCard from "@/components/PostCard"
import { useAppDispatch } from "@/hooks"
import { usersActions } from "@/slices/usersSlice"
import { Post } from "@/types/postType"
import { User } from "@/types/userType"
import { Box, Button, CircularProgress, Container, Divider, FormControl, Grid, InputLabel, MenuItem, Pagination, Select, Stack, Typography } from "@mui/material"
import axios from "axios"
import Head from "next/head"
import * as React from "react"
import { Bar } from "react-chartjs-2"
import {
	Chart as ChartJS,
	CategoryScale,
	LinearScale,
	BarElement,
	Title,
	Tooltip,
	Legend,
	Colors
} from "chart.js"

// Register ChartJS plugins
ChartJS.register(
	CategoryScale,
	LinearScale,
	BarElement,
	Title,
	Tooltip,
	Legend,
	Colors
)

/**
 * AdminPage Component
 * 
 * This component is only available to the admin. It allows 
 * them to make various aggregating queries.
 */
export default function NetworkPage() {
	/**
	 * State
	 */

	/**
	 * Render
	 */
	return (
		<Container
			sx={{
				pt: 3
			}}
		>
			<Head>
				<title>KSUConnect | Network</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main>
				<Grid container columnSpacing={2}>
					<Grid item xs={7}>
						<Box
							sx={{
								backgroundColor: "white",
								borderRadius: 3,
								padding: 2,
							}}
							border="1px solid"
							borderColor="divider"
						>
							<Typography variant="h6">Posts</Typography>
							<PostsPanel />
						</Box>
					</Grid>
					<Grid item xs={5}>
						<Box
							sx={{
								backgroundColor: "white",
								borderRadius: 3,
								padding: 2
							}}
							border="1px solid"
							borderColor="divider"
						>
							<Chart />
						</Box>
					</Grid>
				</Grid>
			</main>
		</Container>
	)
}

/**
 * PostsPanel Component
 * 
 * This component allows the admin to see all the Posts for a query. They
 * can filter by SchoolStatus, Major, and Categories that other
 * users are interested it.
 */
function PostsPanel() {
	/**
	 * Hooks
	 */
	// Dispatches an action to the store
	const dispatch = useAppDispatch()

	/**
	 * State
	 */
	// State that holds the currently select status
	const [status, setStatus] = React.useState( "" )
	// State that holds the currently select category
	const [category, setCategory] = React.useState( "" )
	// State that holds the list of all statuses available from the DB
	const [statuses, setStatuses] = React.useState<string[]>( [] )
	// State that holds the list of all categories available from the DB
	const [categories, setCategories] = React.useState<string[]>( [] )
	// State to hold the content the user is searching for
	const [content, setContent] = React.useState( "" )
	// State that holds the list of Posts that match the query
	const [posts, setPosts] = React.useState<Post[]>( [] )
	// State that holds the query is loading or not
	const [loading, setLoading] = React.useState( true )
	// State that holds the pagination page the user has selected
	const [page, setPage] = React.useState( 1 )
	// State that holds the number of pages in the search query
	const [pageCount, setPageCount] = React.useState( 0 )

	/**
	 * Callbacks
	 */
	// Clears all the filters
	const handleClearFilters = React.useCallback( () => {
		setStatus( "" )
		setCategory( "" )
		setContent( "" )
	}, [] )

	// Initial render - fetches all the filters from the DB
	React.useEffect( () => {
		const fetchFilters = async () => {
			const response = await axios( "/api/filters" )

			setStatuses( response.data.statuses )
			setCategories( response.data.categories )
		}

		fetchFilters()
	}, [] )

	// Whenever one of the filters changes, queries the DB for users that match
	React.useEffect( () => {
		const fetchPosts = async () => {
			const response = await axios.post( "/api/filters/posts", {
				status,
				category,
				content,
				page
			} )

			const newPosts: Post[] = response.data.posts.map( ( post: Post ) => ( {
				...post,
				createdOn: new Date( post.createdOn ),
				updatedOn: new Date( post.updatedOn )
			} ) )
			const newUsers: User[] = response.data.users

			dispatch( usersActions.updateUsers( newUsers ) )
			setPosts( newPosts )
			setPageCount( response.data.pageCount )
		}

		setLoading( true )
		setTimeout( () => {
			fetchPosts().then( () => setLoading( false ) )
		}, 1000 )
	}, [status, category, page, content, dispatch] )

	// When the filters changes, show the first page of results
	React.useEffect( () => {
		setPage( 1 )
	}, [status, category] )

	/**
	 * Render
	 */
	return (
		<Stack gap={1}>
			<Stack
				sx={{
					flexDirection: "row",
					alignItems: "center"
				}}
				gap={1}
			>
				<FormControl sx={{ minWidth: 200 }}>
					<InputLabel id="school-status-select">School Status</InputLabel>
					<Select 
						labelId="school-status-select"
						label="School Status"
						value={status}
						onChange={e => setStatus( e.target.value )}
					>
						{statuses.map( item => (
							<MenuItem value={item} key={item}>{item}</MenuItem>
						) )}
					</Select>
				</FormControl>
				<FormControl sx={{ minWidth: 200 }}>
					<InputLabel id="category-select">Category</InputLabel>
					<Select 
						labelId="category-select"
						label="Category"
						value={category}
						onChange={e => setCategory( e.target.value )}
					>
						{categories.map( item => (
							<MenuItem value={item} key={item}>{item}</MenuItem>
						) )}
					</Select>
				</FormControl>
				<Button variant="contained" onClick={handleClearFilters}>Clear Filters</Button>
			</Stack>
			<Divider />
			<Pagination sx={{ alignSelf: "center" }} count={pageCount} page={page} onChange={( e, value ) => setPage( value )} />
			<Stack gap={1}>
				{loading && (
					<CircularProgress 
						sx={{
							alignSelf: "center",
						}}
					/>
				)}
				{!loading && posts.length === 0 && (
					<Typography>No posts</Typography>
				)}
				{!loading && posts.map( post => (
					<PostCard 
						key={post.postId}
						post={post}
					/>
				) )}
			</Stack>
		</Stack>
	)
}

/**
 * Chart Component
 * 
 * This component renders a chart showing the top
 * three categories for posts in the DB
 */
function Chart() {
	/**
	 * State
	 */
	// State to hold the labels for the chart
	const [labels, setLabels] = React.useState<string[]>( [] )
	// State to hold the datapoints
	const [data, setData] = React.useState<number[]>( [] )

	/**
	 * Effects
	 */
	// Initial render - queries the database for the top 3 categories
	React.useEffect( () => {
		const fetchData = async () => {
			const response = await axios( "/api/categories/trending" )

			setLabels( response.data.labels )
			setData( response.data.data )
		}

		fetchData()
	}, [] )

	/**
	 * Render
	 */
	return (
		<Bar 
			height={500}
			options={{
				plugins: {
					colors: {
						enabled: true,
					},
					legend: {
						display: false
					},
					title: {
						display: true,
						text: "Top 3 Post Categories"
					}
				}
			}} 
			data={{
				labels,
				datasets: [{
					data,
					backgroundColor: [
						"#ff6384",
						"#36a2eb",
						"#cc65fe",
					]
				}]
			}}/>
	)
}
